#+TITLE:  Emacs Configuration File
#+AUTHOR: Craig Gavagan
#+EMAIL:  dev@craiggavagan.com
#+DESCRIPTION: A literate programming version of my Emacs Initialization script.
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/init.el
#+PROPERTY:    eval no-export
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

* Contents

- [[#compilation][Compilation]]
- [[#basic-settings][Basic Settings]]
- [[#package-settings][Package Settings]]
- [[#display-settings][Display Settings]]
- [[#editing-settings][Editing Settings]]

* Compilation
  #+CUSTOM_ID: compiling

  I am unsure how recent an emacs you need to be able to use this file, but it works for me on
  GNU Emacs 25.5.1

* Basic Settings
  #+CUSTOM_ID: basic-settigns

** Fullscreen

   Lets start emacs in fullscreen mode

   #+BEGIN_SRC elisp
     (toggle-frame-fullscreen)
   #+END_SRC

** Emacs home directory

   Keep a variable for my emacs directory and a function for getting subdirectories

   #+BEGIN_SRC elisp
     (defconst cg/emacs-home (concat (getenv "HOME") "/.emacs.d/"))
     (defun cg/emacs-home-subdir (d) (expand-file-name d cg/emacs-home))
   #+END_SRC

** Customisation File

   I much prefer to customize emacs using elisp over the customization menus, but sometimes it is
   easier to use it. Even still any customizations should go into their own file, since any 
   customizations will be overridden if I tangle this file after customizing.

   #+BEGIN_SRC elisp
     (setq custom-file (expand-file-name "custom.el" (cg/emacs-home-subdir "elisp")))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** Load path

   Add $HOME/.emacs.d/elisp to the load path

   #+BEGIN_SRC elisp
     (add-to-list 'load-path (cg/emacs-home-subdir "elisp"))
   #+END_SRC

* Package Initialisation

** Package Manager
   #+CUSTOM_ID: package-initialisation

   Emacs now comes with a package manager, which is awesome, but the GNU repos are pretty
   restrictive so I add in the MELPA repository which is much less restrictive.

   #+BEGIN_SRC elisp
     (require 'package)
     (setq package-archives '(("gnu"   . "http://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")))
     (package-initialize)
   #+END_SRC

** Use Package

   [[https://github.com/jwiegley/use-package][use-package]] is a neat little thing allowing you to neatly manage package installation,
   configuration, keybingings and other nifty things. It can also dramatically reduce startup
   times for emacs. I haven't investigated how to make my emacs start up faster, but the
   installation and configuration is enough convenience for me for now. So let's get it
   installed.

   #+BEGIN_SRC elisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
   #+END_SRC

** Package Installations

   Now that use-package is installed, let's install the packages we want

*** Apache Mode

    #+BEGIN_SRC elisp
      (use-package apache-mode
        :ensure t)
    #+END_SRC

*** Coffee Mode

    #+BEGIN_SRC elisp
      (use-package coffee-mode
        :ensure t)
    #+END_SRC

*** Demo It

    #+BEGIN_SRC elisp
      (use-package demo-it
        :ensure t)
    #+END_SRC

*** Helm

    #+BEGIN_SRC elisp
      (use-package helm
        :ensure t
        :bind
        (("M-x" . helm-M-x)
         ("C-c f" . helm-find)))
    #+END_SRC

*** JS2 Mode

    #+BEGIN_SRC elisp
      (use-package js2-mode
        :ensure t
        :mode
        ("\\.js$" . js2-mode)
        :init
        (setq js-basic-indent 2)
        :config
        (setq-default js2-basic-indent 2)
        (setq-default js2-basic-offset 2))
    #+END_SRC

*** JSON Mode

    #+BEGIN_SRC elisp
      (use-package json-mode
        :ensure t)
    #+END_SRC

*** LaTeX Preview Pane

    #+BEGIN_SRC elisp
      (use-package latex-preview-pane
        :if window-system
        :ensure t
        :config
        (latex-preview-pane-enable))
    #+END_SRC

*** Linum Mode

    #+BEGIN_SRC elisp
    (use-package linum
      :ensure t
      :bind
      ("C-c l" . linum-mode)
      :init
      (setq linum-format "%d ")
      (global-linum-mode 1))
    #+END_SRC

*** Linum Off

    #+BEGIN_SRC elisp
      (use-package linum-off
        :ensure t
        :init (setq linum-disabled-modes-list '(eshell-mode
                                                wl-summary-mode
                                                compilation-mode
                                                diredmode
                                                doc-view-mode
                                                image-mode)))

    #+END_SRC

*** Node REPL

    #+BEGIN_SRC elisp
      (use-package nodejs-repl
        :ensure t)
    #+END_SRC

*** Magit

    #+BEGIN_SRC elisp
      (use-package magit
        :ensure t
        :bind
        ("C-c g" . magit-status))
    #+END_SRC

*** Markdown mode

    #+BEGIN_SRC elisp
      (use-package markdown-mode
        :ensure t)
    #+END_SRC

*** Nginx mode

    #+BEGIN_SRC elisp
      (use-package nginx-mode
        :ensure t)
    #+END_SRC

*** Python Mode

    #+BEGIN_SRC elisp
      (use-package python-mode
        :ensure t
        :config (setq-default python-indent 2))
    #+END_SRC

*** Org Mode

    #+BEGIN_SRC elisp
      (use-package org-mode
        :ensure t
        :config
        (setq org-return-follow-links t
              org-src-fontify-natively t
              org-log-done t
              org-agenda-files '("~/Nextcloud/org")
              org-archive-location (format-time-string
                                    "~/Nextcloud/org/archive/%Y/%m/archive-%d.org::"
                                    (current-time)))
        :bind
        (("C-c a" . org-agenda)
         ("C-c c" . org-capture)))
    #+END_SRC

*** Org Tree Slide

    #+BEGIN_SRC elisp
      (use-package org-tree-slide
        :ensure t)
    #+END_SRC

*** SASS Mode

    #+BEGIN_SRC elisp
      (use-package sass-mode
        :ensure t)
    #+END_SRC

*** SCSS Mode

    #+BEGIN_SRC elisp
      (use-package scss-mode
        :ensure t)
    #+END_SRC

*** Smartparens

    #+BEGIN_SRC elisp
      (use-package smartparens
        :ensure t)
    #+END_SRC

*** SR Speedbar

    Provides a directory explorer similar to what you'd find in Sublime/Atom/Other IDEs.

    It has some weird defaults though. So I stop it autoupdating based on the active buffer,
    make it show files it doesn't explicitly understand and make it use text for buttons.

    #+BEGIN_SRC elisp
      (use-package sr-speedbar
        :ensure t
        :config
        (setq sr-speedbar-auto-refresh nil
              speedbar-show-unknown-files t
              speedbar-use-images nil))
    #+END_SRC

*** YAML Mode

    #+BEGIN_SRC elisp
      (use-package yaml-mode
        :ensure t)
    #+END_SRC

*** Yasnippet

    #+BEGIN_SRC elisp
      (use-package yasnippet
        :ensure t
        :bind ("C-c y n" . yas-new-snippet))
    #+END_SRC

*** Zygospore

    Bizzare name, really useful functionality.

    Zygospore provides a function to toggle the deletion of other windows, like C-x 1, but with
    an undo.

    #+BEGIN_SRC elisp
      (use-package zygospore
        :ensure t
        :bind
        ("C-x 1" . zygospore-toggle-delete-other-windows))
    #+END_SRC

*** Post Install

    Speedbar is good. Speedbar is great. We surrender our will. As of this date

    #+BEGIN_SRC elisp
      (sr-speedbar-open)
    #+END_SRC

* Display Settings
  #+CUSTOM_ID: display-settings

** Menu Bar

   I don't need a menu bar

   #+BEGIN_SRC elisp 
     (menu-bar-mode -1)
   #+END_SRC

** Splash screen

   The splash screen similarly isn't needed, toss it.

   #+BEGIN_SRC elisp
     (setq inhibit-startup-message t)
   #+END_SRC

** (Tool|Scroll)bars

   Death to toolbars, scrollbars, and all graphical cruft

   #+BEGIN_SRC elisp
     (when (window-system)
       (tool-bar-mode 0)
       (scroll-bar-mode -1)
       (when (fboundp 'horizontal-scroll-bar-mode)
         (horizontal-scroll-bar-mode -1)))
   #+END_SRC

** Scratch Message

   I don't need the three lines of text explaining the scratch buffer

   #+BEGIN_SRC elisp
     (setq initial-scratch-message "")
   #+END_SRC

* Editing Settings
  #+CUSTOM_ID: editing-settings

** Tabs Vs Spaces

   I prefer spaces. Death to whatever you use.

   #+BEGIN_SRC elisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 2)
   #+END_SRC

   Make the tab key always indent, then do completion

   #+BEGIN_SRC elisp
     (setq-default tab-always-indent 'complete)
   #+END_SRC

** Autosave and backup settings

   Autosave and backup files are annoying. This disables them

   #+BEGIN_SRC elisp
     (setq auto-save-default nil)
     (setq make-backup-files nil)
   #+END_SRC
